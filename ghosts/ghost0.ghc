int 3        ;Get ghost's name
mov [4],A
int 5        ;Get ghost's position
mov [5],A
mov [6],B   ;Finish Storing ghost's position
int 7
jlt 9,A,5
mov A,0
jeq 86,0,0
int 1     ;f_gotout :Get Lambda Man's position
mov [7],A
mov [8],B ;Finish storing Lambda Man's position
mov A,[5]  ;Collect Wall info
mov B,[6]
inc A
int 7
mov [1],A
mov A,[5]
dec A
int 7
mov [3],A
mov A,[5]
inc B
int 7
mov [2],A
mov B,[6]
mov A,[5]
dec B
int 7
mov [0],A  ;Finish Collecting Wall info
jgt 35,[5],[13]  ;If current x is greater than previous x set left as wall
jlt 37,[5],[13] ;If current x is less than previous x set right as wall
jgt 39,[6],[14]    ;If current y is greater than prevous y set up as wall 
mov [2],0
jeq 40,0,0
mov [3],0  ;f_setleftwall
jeq 40,0,0
mov [1],0  ;f_setrightwall
jeq 40,0,0
mov [0],0  ;f_setupwall
mov [9],0  ;f_wallset intialize direction weights
mov [10],0
mov [11],0
mov [12],0 ;finished int direction weights
jgt 48,[5],[7]  ;jump if lm is on left: Determin the weights of which direction to move based on lm locations
mov [10],[7]
sub  [10],[5]
jeq 50,0,0
mov [12],[5]    ;f_lmisleft
sub  [12],[7]
jgt 54,[6],[8]  ;f_islmup :jump if lm is on up 
mov [11],[8]
sub [11],[6]
jeq 56,0,0
mov [9],[6] ;f_lmisup
sub [9],[8]
jgt 58,[0],4       ;f_lmweighted :Add surrounding objects to the weight
add [9],[0]               
jgt 60,[0],[0]    ;f_upstart
mov [9],0
jgt 70,[1],4    ;f_noupwall
add [10],[1]
jgt 64,[1],[0] ;f_rightstart
mov [10],0
jgt 66,[2],4     ;f_norightwall
add [11],[2]
jgt 68,[2],[0]  ;f_downstart
mov [11],0
jgt 70,[3],0	  ;f_nodownwall
add [12],[3]
jgt 72,[0],[0]  ;f_rightstart
mov [12],0
jgt 77,[9],[12]      ;f_path jump if up is better
jgt 81,[10],[12]  ;jump if right is better
jgt 84,[11],[12]  ;jump if down is best
mov A,3                   ;set move direction to left
jeq 86,0,0
jgt 81,[10],[9]   ;f_bigup :jump if right is better
jgt 84,[11],[9]   ;jump if down is best
mov A,0                   ;set move direction to left
jeq 86,0,0
jgt 84,[11],[10]  ;f_bigright :jump if down is best
mov A,1                   ;set move direction to left
jeq 86,0,0
mov A,2                   ;f_bestdown
jeq 86,0,0
int 0               ;f_end make chosen move
mov [13],[5]        ;Cache current location
mov [14],[6]	    
hlt
